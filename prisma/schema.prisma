// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This file was automatically generated by the schema merge script
// Last merged: 2025-05-16T06:04:27.847Z

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../node_modules/.prisma/client"

}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Board {
  id          String      @id @default(uuid()) // Board ID (UUID-based)
  name        String
  description String
  isVisible   Boolean     @default(false)
  isArchived  Boolean     @default(false)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  suggestions Suggestion[]
}

model Comment {
  id          String      @id @default(uuid()) // Comment ID (UUID-based)
  content     String
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  suggestionId String
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Credential {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   @unique // Every credential is linked to a specific user
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  credentialId  String   @unique // WebAuthn credential identifier
  publicKey     Bytes
  counter       Int      @default(0)

  @@index([credentialId])
  @@index([userId])
}

model Status {
  id          String      @id @default(uuid()) // Status ID (UUID-based)
  name        String
  description String
  suggestions Suggestion[]
}

model Suggestion {
  id          String      @id @default(uuid()) // Suggestion ID (UUID-based)
  title       String
  content     String
  isVisible   Boolean     @default(false)
  statusId    String
  status      Status      @relation(fields: [statusId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  votes       Vote[]
  comments    Comment[]
  boardId     String
  board       Board       @relation(fields: [boardId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model User {
  id          String      @id @default(uuid()) // User ID (UUID-based)
  username    String      @unique
  createdAt   DateTime    @default(now())
  credentials Credential[] // Relationship: One user can have many credentials
  // Fields merged from another schema file
  avatar String?
  email       String      @unique
  acceptAnonymous Boolean @default(false)
  notifyNewComment Boolean @default(true)
  notifyNewIdea Boolean @default(true)
  suggestions Suggestion[]
  votes       Vote[]
  comments    Comment[]
  boards      Board[]
}

model Vote {
  id          String      @id @default(uuid()) // Vote ID (UUID-based)
  suggestionId String
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}