model Board {
  id          String      @id @default(uuid()) // Board ID (UUID-based)
  name        String
  description String
  isVisible   Boolean     @default(false)
  isArchived  Boolean     @default(false)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  Ideas Idea[]
}

model Comment {
  id          String      @id @default(uuid()) // Comment ID (UUID-based)
  content     String
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  IdeaId String
  Idea   Idea @relation(fields: [IdeaId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

/**
* Editing
* Filming
* Finished
* In Progress
* Planning
* Prepping
* Recording
* Writing
*/
model Status {
  id          String      @id @default(uuid()) // Status ID (UUID-based)
  name        String
  description String
  Ideas Idea[]
}

model Idea {
  id          String      @id @default(uuid()) // Idea ID (UUID-based)
  content     String
  isVisible   Boolean     @default(false)
  statusId    String
  status      Status      @relation(fields: [statusId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  votes       Vote[]
  comments    Comment[]
  boardId     String
  board       Board       @relation(fields: [boardId], references: [id])
  typeId      String
  type        Type        @relation(fields: [typeId], references: [id])
  tagId       String
  tag         Tag         @relation(fields: [tagId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Tag {
  id          String      @id @default(uuid()) // Tag ID (UUID-based)
  name        String
  Ideas       Idea[]
}

/**
* YouTube Video
* Blog Post
* Documentation
* Podcast
* Short
* Instagram
* TikTok
* Twitter/X
*/
model Type {
  id          String      @id @default(uuid()) // Type ID (UUID-based)
  name        String
  Ideas Idea[]
}

model Vote {
  id          String      @id @default(uuid()) // Vote ID (UUID-based)
  IdeaId String
  Idea   Idea @relation(fields: [IdeaId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model User {
  id          String      @id @default(uuid()) // User ID (UUID-based)
  avatar String?
  email       String      @unique
  acceptAnonymous Boolean @default(false)
  notifyNewComment Boolean @default(true)
  notifyNewIdea Boolean @default(true)
  Ideas Idea[]
  votes       Vote[]
  comments    Comment[]
  boards      Board[]
  createdAt   DateTime    @default(now())
}